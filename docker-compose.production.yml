version: '3.8'

services:
  # Central Orchestrator
  orchestrator:
    build:
      context: ./apps/orchestrator
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "3001:3001"  # WebSocket port
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://jarvisx:${DB_PASSWORD}@postgres:5432/jarvisx_prod
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_CLOUD_KEY=${GOOGLE_CLOUD_KEY}
      - REDIS_URL=redis://redis:6379
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    volumes:
      - orchestrator_logs:/app/logs
      - orchestrator_data:/app/data
    networks:
      - jarvisx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # STT Service
  stt:
    build:
      context: ./services/stt
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - WHISPER_MODEL=medium
      - MAX_FILE_SIZE=25MB
    restart: unless-stopped
    volumes:
      - stt_cache:/app/cache
    networks:
      - jarvisx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TTS Service
  tts:
    build:
      context: ./services/tts
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=production
      - GOOGLE_CLOUD_KEY=${GOOGLE_CLOUD_KEY}
      - FESTIVAL_ENABLED=true
    restart: unless-stopped
    volumes:
      - tts_cache:/app/cache
    networks:
      - jarvisx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Executor
  web-executor:
    build:
      context: ./services/web-executor
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=production
      - ORCHESTRATOR_URL=http://orchestrator:3000
    depends_on:
      - orchestrator
    restart: unless-stopped
    volumes:
      - web_executor_logs:/app/logs
    networks:
      - jarvisx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WhatsApp Service
  whatsapp:
    build:
      context: ./services/whatsapp
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - NODE_ENV=production
      - ORCHESTRATOR_URL=http://orchestrator:3000
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
    depends_on:
      - orchestrator
    restart: unless-stopped
    volumes:
      - whatsapp_logs:/app/logs
    networks:
      - jarvisx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PC Agent (for desktop control)
  pc-agent:
    build:
      context: ./services/pc-agent
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - NODE_ENV=production
      - ORCHESTRATOR_URL=http://orchestrator:3000
      - ORCHESTRATOR_WS_URL=ws://orchestrator:3001
      - ORCHESTRATOR_API_KEY=${PC_AGENT_API_KEY}
      - SCREEN_CAPTURE_QUALITY=0.8
      - WEBRTC_ICE_SERVERS=stun:stun.l.google.com:19302
    depends_on:
      - orchestrator
    restart: unless-stopped
    volumes:
      - pc_agent_logs:/app/logs
      - /tmp/.X11-unix:/tmp/.X11-unix:rw  # X11 for GUI access
    networks:
      - jarvisx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    privileged: true  # Required for system control

  # Trading Service
  trading:
    build:
      context: ./services/trading
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - NODE_ENV=production
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - ORCHESTRATOR_URL=http://orchestrator:3000
      - RISK_LIMIT_MAX_POSITION=${RISK_LIMIT_MAX_POSITION:-1000}
      - RISK_LIMIT_DAILY_LOSS=${RISK_LIMIT_DAILY_LOSS:-500}
      - TRADING_MODE=${TRADING_MODE:-demo}
    depends_on:
      - orchestrator
      - redis
    restart: unless-stopped
    volumes:
      - trading_logs:/app/logs
      - trading_data:/app/data
    networks:
      - jarvisx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=jarvisx_prod
      - POSTGRES_USER=jarvisx
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - jarvisx-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvisx -d jarvisx_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - jarvisx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - orchestrator
      - stt
      - tts
      - web-executor
      - whatsapp
      - pc-agent
      - trading
    restart: unless-stopped
    networks:
      - jarvisx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - jarvisx-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - jarvisx-network

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - jarvisx-network

  # Kibana for Log Analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - jarvisx-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=jarvisx_prod
      - POSTGRES_USER=jarvisx
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: ["sh", "-c", "while true; do sleep 86400; /backup.sh; done"]
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - jarvisx-network

volumes:
  postgres_data:
  redis_data:
  orchestrator_logs:
  orchestrator_data:
  stt_cache:
  tts_cache:
  web_executor_logs:
  whatsapp_logs:
  pc_agent_logs:
  trading_logs:
  trading_data:
  nginx_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  jarvisx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
