#!/bin/bash

# Demo script for WhatsApp service
# Tests WhatsApp message parsing and order creation

echo "üì± JarvisX WhatsApp Service Demo"
echo "==============================="

# Check if WhatsApp service is running
echo "Checking WhatsApp service health..."
curl -s http://localhost:8003/health | jq '.' || {
    echo "‚ùå WhatsApp service is not running. Please start it with: docker-compose up whatsapp"
    exit 1
}

echo "‚úÖ WhatsApp service is running"

# Test 1: Parse Sinhala order message
echo -e "\nüá±üá∞ Test 1: Parsing Sinhala order message"
curl -s -X POST http://localhost:8003/parse-order \
  -H "Content-Type: application/json" \
  -d '{
    "message": "‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä, ‡∂∏‡∂ß ‡∂Ω‡∑ê‡∂¥‡∑ä‡∂ß‡∑ú‡∂¥‡∑ä 2‡∂ö‡∑ä ‡∂ú‡∂±‡∑ä‡∂± ‡∂ï‡∂±. ‡∂∏‡∂ú‡∑ö ‡∂±‡∂∏ ‡∂ö‡∂∏‡∂Ω‡∑ä. ‡∂Ö‡∂Ø‡∑ä‡∂Ø‡∂ª‡∑ä‡∑É‡∑ä 123 ‡∂ö‡∑ú‡∂Ω‡∑ä‡∂Ω‡∑ú‡∂∏‡∑ä‡∂∂‡∑ù. ‡∂∏‡∑í‡∂Ω ‡∂ö‡∑ì‡∂∫‡∂Ø?"
  }' | jq '.'

# Test 2: Parse English order message
echo -e "\nüá∫üá∏ Test 2: Parsing English order message"
curl -s -X POST http://localhost:8003/parse-order \
  -H "Content-Type: application/json" \
  -d '{
    "message": "Hi, I want to order 2 laptops and 1 mouse. My name is John Smith, phone 0771234567. Deliver to 123 Main St tomorrow."
  }' | jq '.'

# Test 3: Parse mixed language message
echo -e "\nüåê Test 3: Parsing mixed language message"
curl -s -X POST http://localhost:8003/parse-order \
  -H "Content-Type: application/json" \
  -d '{
    "message": "‡∂∏‡∂ß laptop 1‡∂ö‡∑ä ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í. ‡∂∏‡∂ú‡∑ö ‡∂±‡∂∏ John. Phone 0771234567. Delivery tomorrow please."
  }' | jq '.'

# Test 4: Parse inquiry message
echo -e "\n‚ùì Test 4: Parsing inquiry message"
curl -s -X POST http://localhost:8003/parse-order \
  -H "Content-Type: application/json" \
  -d '{
    "message": "‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä, laptop ‡∂∏‡∑í‡∂Ω ‡∂ö‡∑ì‡∂∫‡∂Ø? ‡∂∏‡∂ß ‡∂ú‡∂±‡∑ä‡∂± ‡∂ï‡∂±."
  }' | jq '.'

# Test 5: Test webhook simulation (without actual WhatsApp)
echo -e "\nüîó Test 5: Simulating webhook call"
curl -s -X POST http://localhost:8003/webhook \
  -H "Content-Type: application/json" \
  -d '{
    "object": "whatsapp_business_account",
    "entry": [{
      "changes": [{
        "field": "messages",
        "value": {
          "messages": [{
            "from": "94771234567",
            "text": {
              "body": "‡∂∏‡∂ß ‡∂ß‡∑ú‡∂¥‡∑ä 3‡∂ö‡∑ä ‡∂ú‡∂±‡∑ä‡∂± ‡∂ï‡∂±. ‡∂∏‡∂ú‡∑ö ‡∂±‡∂∏ ‡∑É‡∂ª‡∂≠‡∑ä."
            }
          }]
        }
      }]
    }]
  }' | jq '.'

# Test 6: Send test message (if WhatsApp token is configured)
if [ -n "$WHATSAPP_TOKEN" ]; then
    echo -e "\nüì§ Test 6: Sending test message"
    curl -s -X POST http://localhost:8003/send-message \
      -H "Content-Type: application/json" \
      -d '{
        "phone": "94771234567",
        "message": "‡∂∏‡∂ß ‡∂î‡∂∂‡∑ö ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑è. ‡∂â‡∂ö‡∑ä‡∂∏‡∂±‡∑í‡∂±‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±‡∂∏‡∑ä. üöÄ"
      }' | jq '.'
else
    echo -e "\n‚ö†Ô∏è Test 6: Skipped (WHATSAPP_TOKEN not configured)"
fi

# Test 7: Test webhook verification
echo -e "\nüîê Test 7: Testing webhook verification"
curl -s "http://localhost:8003/webhook?hub.mode=subscribe&hub.verify_token=$WEBHOOK_SECRET&hub.challenge=test_challenge" | jq '.'

echo -e "\n‚úÖ WhatsApp demo completed!"
echo "üí° Configure WHATSAPP_TOKEN in your .env file to test actual message sending."
echo "üìã Webhook URL: http://your-domain.com:8003/webhook"
